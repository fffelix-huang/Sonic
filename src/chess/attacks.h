#pragma once

#include <array>
#include <cstdint>

#include "bitboard.h"
#include "color.h"

namespace sonic {

template<std::size_t N>
struct Magic {
    Bitboard                ray_mask;
    std::uint64_t           magic;
    std::uint64_t           shift;
    std::array<Bitboard, N> attacks;

    Bitboard operator()(Bitboard occupied) const {
        occupied &= ray_mask;
        std::uint64_t key = (occupied.to_int() * magic) >> shift;
        return attacks[key];
    }
};

extern Bitboard    rook_rays[Square::SQ_NB];
extern Magic<4096> rook_magics[Square::SQ_NB];
extern Bitboard    bishop_rays[Square::SQ_NB];
extern Magic<512>  bishop_magics[Square::SQ_NB];

void init_attacks();

// Magic numbers for rook.
constexpr std::uint64_t rook_multiplies[Square::SQ_NB] = {
  0xa8002c000108020ULL,  0x4440200140003000ULL, 0x8080200010011880ULL, 0x380180080141000ULL,
  0x1a00060008211044ULL, 0x410001000a0c0008ULL, 0x9500060004008100ULL, 0x100024284a20700ULL,
  0x802140008000ULL,     0x80c01002a00840ULL,   0x402004282011020ULL,  0x9862000820420050ULL,
  0x1001448011100ULL,    0x6432800200800400ULL, 0x40100010002000cULL,  0x2800d0010c080ULL,
  0x90c0008000803042ULL, 0x4010004000200041ULL, 0x3010010200040ULL,    0xa40828028001000ULL,
  0x123010008000430ULL,  0x24008004020080ULL,   0x60040001104802ULL,   0x582200028400d1ULL,
  0x4000802080044000ULL, 0x408208200420308ULL,  0x610038080102000ULL,  0x3601000900100020ULL,
  0x80080040180ULL,      0xc2020080040080ULL,   0x80084400100102ULL,   0x4022408200014401ULL,
  0x40052040800082ULL,   0xb08200280804000ULL,  0x8a80a008801000ULL,   0x4000480080801000ULL,
  0x911808800801401ULL,  0x822a003002001894ULL, 0x401068091400108aULL, 0x4a10a00004cULL,
  0x2000800640008024ULL, 0x1486408102020020ULL, 0x100a000d50041ULL,    0x810050020b0020ULL,
  0x204000800808004ULL,  0x20048100a000cULL,    0x112000831020004ULL,  0x9000040810002ULL,
  0x440490200208200ULL,  0x8910401000200040ULL, 0x6404200050008480ULL, 0x4b824a2010010100ULL,
  0x4080801810c0080ULL,  0x400802a0080ULL,      0x8224080110026400ULL, 0x40002c4104088200ULL,
  0x1002100104a0282ULL,  0x1208400811048021ULL, 0x3201014a40d02001ULL, 0x5100019200501ULL,
  0x101000208001005ULL,  0x2008450080702ULL,    0x1002080301d00cULL,   0x410201ce5c030092ULL};

constexpr int rook_shifts[Square::SQ_NB] = {
  52, 53, 53, 53, 53, 53, 53, 52, 53, 54, 54, 54, 54, 54, 54, 53, 53, 54, 54, 54, 54, 54,
  54, 53, 53, 54, 54, 54, 54, 54, 54, 53, 53, 54, 54, 54, 54, 54, 54, 53, 53, 54, 54, 54,
  54, 54, 54, 53, 53, 54, 54, 54, 54, 54, 54, 53, 52, 53, 53, 53, 53, 53, 53, 52};

// Magic numbers for bishop.
constexpr std::uint64_t bishop_multiplies[Square::SQ_NB] = {
  0x440049104032280ULL,  0x1021023c82008040ULL, 0x404040082000048ULL,  0x48c4440084048090ULL,
  0x2801104026490000ULL, 0x4100880442040800UL,  0x181011002e06040ULL,  0x9101004104200e00ULL,
  0x1240848848310401ULL, 0x2000142828050024ULL, 0x1004024d5000ULL,     0x102044400800200ULL,
  0x8108108820112000ULL, 0xa880818210c00046ULL, 0x4008008801082000UL,  0x60882404049400ULL,
  0x104402004240810ULL,  0xa002084250200ULL,    0x100b0880801100ULL,   0x4080201220101ULL,
  0x44008080a00000ULL,   0x202200842000ULL,     0x5006004882d00808ULL, 0x200045080802ULL,
  0x86100020200601ULL,   0xa802080a20112c02ULL, 0x80411218080900ULL,   0x200a0880080a0ULL,
  0x9a01010000104000ULL, 0x28008003100080ULL,   0x211021004480417ULL,  0x401004188220806ULL,
  0x825051400c2006ULL,   0x140c0210943000ULL,   0x242800300080ULL,     0xc2208120080200ULL,
  0x2430008200002200ULL, 0x1010100112008040ULL, 0x8141050100020842UL,  0x822081014405ULL,
  0x800c049e40400804ULL, 0x4a0404028a000820ULL, 0x22060201041200ULL,   0x360904200840801ULL,
  0x881a08208800400ULL,  0x60202c00400420ULL,   0x1204440086061400ULL, 0x8184042804040ULL,
  0x64040315300400ULL,   0xc01008801090a00ULL,  0x808010401140c00ULL,  0x4004830c2020040ULL,
  0x80005002020054ULL,   0x40000c14481a0490ULL, 0x10500101042048ULL,   0x1010100200424000ULL,
  0x640901901040ULL,     0xa0201014840ULL,      0x840082aa011002ULL,   0x10010840084240aULL,
  0x420400810420608ULL,  0x8d40230408102100ULL, 0x4a00200612222409ULL, 0xa08520292120600ULL};

constexpr int bishop_shifts[Square::SQ_NB] = {
  58, 59, 59, 59, 59, 59, 59, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 57, 57, 57, 57,
  59, 59, 59, 59, 57, 55, 55, 57, 59, 59, 59, 59, 57, 55, 55, 57, 59, 59, 59, 59, 57, 57,
  57, 57, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 58, 59, 59, 59, 59, 59, 59, 58};


constexpr Bitboard pawn_attacks[Color::COLOR_NB][Square::SQ_NB] = {
  // White pawn attacks
  {0x200,
   0x500,
   0xa00,
   0x1400,
   0x2800,
   0x5000,
   0xa000,
   0x4000,
   0x20000,
   0x50000,
   0xa0000,
   0x140000,
   0x280000,
   0x500000,
   0xa00000,
   0x400000,
   0x2000000,
   0x5000000,
   0xa000000,
   0x14000000,
   0x28000000,
   0x50000000,
   0xa0000000,
   0x40000000,
   0x200000000,
   0x500000000,
   0xa00000000,
   0x1400000000,
   0x2800000000,
   0x5000000000,
   0xa000000000,
   0x4000000000,
   0x20000000000,
   0x50000000000,
   0xa0000000000,
   0x140000000000,
   0x280000000000,
   0x500000000000,
   0xa00000000000,
   0x400000000000,
   0x2000000000000,
   0x5000000000000,
   0xa000000000000,
   0x14000000000000,
   0x28000000000000,
   0x50000000000000,
   0xa0000000000000,
   0x40000000000000,
   0x200000000000000,
   0x500000000000000,
   0xa00000000000000,
   0x1400000000000000,
   0x2800000000000000,
   0x5000000000000000,
   0xa000000000000000,
   0x4000000000000000,
   0x0,
   0x0,
   0x0,
   0x0,
   0x0,
   0x0,
   0x0,
   0x0},

  // Black pawn attacks
  {0x0,
   0x0,
   0x0,
   0x0,
   0x0,
   0x0,
   0x0,
   0x0,
   0x2,
   0x5,
   0xa,
   0x14,
   0x28,
   0x50,
   0xa0,
   0x40,
   0x200,
   0x500,
   0xa00,
   0x1400,
   0x2800,
   0x5000,
   0xa000,
   0x4000,
   0x20000,
   0x50000,
   0xa0000,
   0x140000,
   0x280000,
   0x500000,
   0xa00000,
   0x400000,
   0x2000000,
   0x5000000,
   0xa000000,
   0x14000000,
   0x28000000,
   0x50000000,
   0xa0000000,
   0x40000000,
   0x200000000,
   0x500000000,
   0xa00000000,
   0x1400000000,
   0x2800000000,
   0x5000000000,
   0xa000000000,
   0x4000000000,
   0x20000000000,
   0x50000000000,
   0xa0000000000,
   0x140000000000,
   0x280000000000,
   0x500000000000,
   0xa00000000000,
   0x400000000000,
   0x2000000000000,
   0x5000000000000,
   0xa000000000000,
   0x14000000000000,
   0x28000000000000,
   0x50000000000000,
   0xa0000000000000,
   0x40000000000000}};

constexpr Bitboard knight_attacks[Square::SQ_NB] = {
  0x0000000000020400, 0x0000000000050800, 0x00000000000A1100, 0x0000000000142200,
  0x0000000000284400, 0x0000000000508800, 0x0000000000A01000, 0x0000000000402000,
  0x0000000002040004, 0x0000000005080008, 0x000000000A110011, 0x0000000014220022,
  0x0000000028440044, 0x0000000050880088, 0x00000000A0100010, 0x0000000040200020,
  0x0000000204000402, 0x0000000508000805, 0x0000000A1100110A, 0x0000001422002214,
  0x0000002844004428, 0x0000005088008850, 0x000000A0100010A0, 0x0000004020002040,
  0x0000020400040200, 0x0000050800080500, 0x00000A1100110A00, 0x0000142200221400,
  0x0000284400442800, 0x0000508800885000, 0x0000A0100010A000, 0x0000402000204000,
  0x0002040004020000, 0x0005080008050000, 0x000A1100110A0000, 0x0014220022140000,
  0x0028440044280000, 0x0050880088500000, 0x00A0100010A00000, 0x0040200020400000,
  0x0204000402000000, 0x0508000805000000, 0x0A1100110A000000, 0x1422002214000000,
  0x2844004428000000, 0x5088008850000000, 0xA0100010A0000000, 0x4020002040000000,
  0x0400040200000000, 0x0800080500000000, 0x1100110A00000000, 0x2200221400000000,
  0x4400442800000000, 0x8800885000000000, 0x100010A000000000, 0x2000204000000000,
  0x0004020000000000, 0x0008050000000000, 0x00110A0000000000, 0x0022140000000000,
  0x0044280000000000, 0x0088500000000000, 0x0010A00000000000, 0x0020400000000000};

constexpr Bitboard king_attacks[Square::SQ_NB] = {
  0x0000000000000302, 0x0000000000000705, 0x0000000000000E0A, 0x0000000000001C14,
  0x0000000000003828, 0x0000000000007050, 0x000000000000E0A0, 0x000000000000C040,
  0x0000000000030203, 0x0000000000070507, 0x00000000000E0A0E, 0x00000000001C141C,
  0x0000000000382838, 0x0000000000705070, 0x0000000000E0A0E0, 0x0000000000C040C0,
  0x0000000003020300, 0x0000000007050700, 0x000000000E0A0E00, 0x000000001C141C00,
  0x0000000038283800, 0x0000000070507000, 0x00000000E0A0E000, 0x00000000C040C000,
  0x0000000302030000, 0x0000000705070000, 0x0000000E0A0E0000, 0x0000001C141C0000,
  0x0000003828380000, 0x0000007050700000, 0x000000E0A0E00000, 0x000000C040C00000,
  0x0000030203000000, 0x0000070507000000, 0x00000E0A0E000000, 0x00001C141C000000,
  0x0000382838000000, 0x0000705070000000, 0x0000E0A0E0000000, 0x0000C040C0000000,
  0x0003020300000000, 0x0007050700000000, 0x000E0A0E00000000, 0x001C141C00000000,
  0x0038283800000000, 0x0070507000000000, 0x00E0A0E000000000, 0x00C040C000000000,
  0x0302030000000000, 0x0705070000000000, 0x0E0A0E0000000000, 0x1C141C0000000000,
  0x3828380000000000, 0x7050700000000000, 0xE0A0E00000000000, 0xC040C00000000000,
  0x0203000000000000, 0x0507000000000000, 0x0A0E000000000000, 0x141C000000000000,
  0x2838000000000000, 0x5070000000000000, 0xA0E0000000000000, 0x40C0000000000000};

}  // namespace sonic